version: '3.9'

volumes:
  media:
  static:
  gp-postgres_data:
#  portainer_data:

networks:
  airba-net:
    driver: bridge

services:
  gp-rest-server:
    container_name: gp-rest-server
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/gamerpro
      - media:/media
    env_file:
      - ./.env.dev
    ports:
      - "8000:8000"
#    depends_on:
#      - redis
#      - postgres
#      - celery-worker
    networks:
      - airba-net
#    command: sh -c "python manage.py collectstatic --noinput --clear"

#  celery-beat:
#    container_name: celery-beat
#    restart: always
#    build:
#      context: .
#      dockerfile: Dockerfile.dev
#    volumes:
#      - .:/airba_mobile_back
#    env_file:
#      - ./.env.dev
#    environment:
#      - CONTAINER_TYPE=BEAT
#    depends_on:
#      - rabbitmq
#      - celery-worker
#      - rest-server
#    networks:
#      - airba-net
#
#  celery-worker:
#    container_name: celery-worker
#    restart: always
#    build:
#      context: .
#      dockerfile: Dockerfile.dev
#    volumes:
#      - .:/airba_mobile_back
#    env_file:
#      - ./.env.dev
#    environment:
#      - CONTAINER_TYPE=CELERY
#    depends_on:
#      - rabbitmq
#    networks:
#      - airba-net

  gp-postgres:
    container_name: gp-postgres
    restart: always
    image: postgres
    volumes:
      - gp-postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=gamerprodb
      - POSTGRES_USER=gamerprodb
      - POSTGRES_PASSWORD=gamerprodb
    ports:
      - "5432:5432"
#    depends_on:
#      - redis
    networks:
      - airba-net

  gp-pgadmin:
    container_name: gp-pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: gamerprodb
    ports:
      - "5555:80"
    networks:
      - airba-net

#  portainer-agent:
#    container_name: portainer-agent
#    restart: always
#    image: portainer/agent
#    environment:
#      AGENT_PORT: 9001
#      LOG_LEVEL: debug
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /var/lib/docker/volumes:/var/lib/docker/volumes
#    networks:
#      - airba-net
#
#  portainer:
#    container_name: portainer
#    command: -H tcp://portainer-agent:9001 --tlsskipverify
#    image: portainer/portainer:alpine
#    ports:
#      - "9000:9000"
#    volumes:
#      - portainer_data:/data
#    depends_on:
#      - rest-server
#      - portainer-agent
#    restart: always
#    networks:
#      - airba-net
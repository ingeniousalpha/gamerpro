version: '3.9'

volumes:
  media:
  static:
  gp-postgres_data:
  redis_data:
  portainer_data:

networks:
  gp-net:
    driver: bridge
  portainer_agent:
    driver: overlay
    attachable: true

services:
  gp-rest-server:
    container_name: gp-rest-server
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/gamerpro
      - media:/media
    env_file:
      - ./.env.dev
    ports:
      - "8000:8000"
#    depends_on:
#      - redis
#      - postgres
#      - celery-worker
    networks:
      - gp-net
#    command: sh -c "python manage.py collectstatic --noinput --clear"

  redis:
    container_name: redis
    restart: always
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gp-net

  celery-beat:
    container_name: celery-beat
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/gamerpro
    env_file:
      - ./.env.dev
    depends_on:
      - celery-worker
      - gp-rest-server
    networks:
      - gp-net
    command: "celery -A config.celery_app beat --loglevel=INFO"

  celery-worker:
    container_name: celery-worker
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/gamerpro
    env_file:
      - ./.env.dev
    networks:
      - gp-net
    command: "celery -A config.celery_app worker --loglevel=INFO"

  gp-postgres:
    container_name: gp-postgres
    restart: always
    image: postgres
    volumes:
      - gp-postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=gamerprodb
      - POSTGRES_USER=gamerprodb
      - POSTGRES_PASSWORD=gamerprodb
    ports:
      - "5432:5432"
#    depends_on:
#      - redis
    networks:
      - gp-net

  gp-pgadmin:
    container_name: gp-pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: gamerprodb
    ports:
      - "5555:80"
    networks:
      - gp-net

  portainer-agent:
    container_name: portainer-agent
    image: portainer/agent
    environment:
      AGENT_CLUSTER_ADDR: tasks.agent
      CAP_HOST_MANAGEMENT: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
      - /:/host
    ports:
      - target: 9001
        published: 9001
        protocol: tcp
        mode: host
    networks:
      - portainer_agent
    deploy:
      mode: global
      placement:
        constraints: [ node.platform.os == linux ]

  portainer:
    container_name: portainer
    command: -H tcp://portainer-agent:9001 --tlsskipverify
    image: portainer/portainer:alpine
    ports:
      - "9000:9000"
    volumes:
      - portainer_data:/data
    depends_on:
      - gp-rest-server
#      - portainer-agent
    restart: always
    networks:
      - portainer_agent